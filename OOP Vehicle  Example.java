// Abstraction: ‡¶è‡¶ï‡¶ü‡¶ø abstract class ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶∏‡¶¨ Vehicle-‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá
abstract class Vehicle {
    // Encapsulation: model ‡¶è‡¶¨‡¶Ç capacity ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã private, ‡¶¨‡¶æ‡¶á‡¶∞‡ßá‡¶∞ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø access ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ
    private String model;
    private int capacity;

    // Constructor: ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü
    public Vehicle(String model, int capacity) {
        setModel(model);         // Encapsulated setter call
        setCapacity(capacity);   // Encapsulated setter call
    }

    // Getter method: encapsulated ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    public String getModel() {
        return model;
    }

    // Setter method: encapsulated ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    public void setModel(String model) {
        if (!model.isEmpty()) {
            this.model = model;
        }
    }

    public int getCapacity() {
        return capacity;
    }

    public void setCapacity(int capacity) {
        if (capacity > 0) {
            this.capacity = capacity;
        }
    }

    // Abstract Method: ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨‡¶æ‡ßü‡¶® subclass ‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶¨‡¶æ‡¶ß‡ßç‡¶Ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
    public abstract void startEngine();
    public abstract void showDetails();
}

// Inheritance: Truck ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ü‡¶ø Vehicle ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ï‡ßá extend ‡¶ï‡¶∞‡¶õ‡ßá
class Truck extends Vehicle {
    private double load; // Truck-specific ‡¶´‡¶ø‡¶≤‡ßç‡¶°

    // Constructor: Truck ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü parent constructor ‡¶ì ‡¶®‡¶ø‡¶ú‡¶∏‡ßç‡¶¨ ‡¶´‡¶ø‡¶≤‡ßç‡¶° initialize ‡¶π‡ßü
    public Truck(String model, int capacity, double load) {
        super(model, capacity);  // Parent class constructor call
        this.load = load;
    }

    // Polymorphism: Vehicle class-‡¶è‡¶∞ method override ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    @Override
    public void startEngine() {
        System.out.println("Truck engine started with loud diesel sound!");
    }

    @Override
    public void showDetails() {
        System.out.println("üöõ Truck Model: " + getModel());
        System.out.println("üì¶ Capacity: " + getCapacity() + " tons");
        System.out.println("üìä Current Load: " + load + " tons");
    }

    // Truck-specific Method: Truck-‡¶è ‡¶Æ‡¶æ‡¶≤‡¶æ‡¶Æ‡¶æ‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞
    public void loadGoods(double weight) {
        if (weight + load <= getCapacity()) {
            load += weight;
            System.out.println("‚úÖ " + weight + " tons loaded. Total Load: " + load + " tons.");
        } else {
            System.out.println("‚ùå Overload! Cannot load " + weight + " tons.");
        }
    }
}

// Interface: ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ abstraction, ‡¶Ø‡ßá‡¶ü‡¶æ multiple class implement ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
interface Maintainable {
    void performMaintenance(); // Method signature only
}

// Bus class: ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ Vehicle, Maintainable interface implement ‡¶ï‡¶∞‡¶õ‡ßá
class Bus extends Vehicle implements Maintainable {
    private int passengers;

    public Bus(String model, int capacity, int passengers) {
        super(model, capacity);
        this.passengers = passengers;
    }

    @Override
    public void startEngine() {
        System.out.println("Bus engine started smoothly.");
    }

    @Override
    public void showDetails() {
        System.out.println("üöå Bus Model: " + getModel());
        System.out.println("üßç Passenger Capacity: " + getCapacity());
        System.out.println("üë• Current Passengers: " + passengers);
    }

    // Interface ‡¶è‡¶∞ method ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨‡¶æ‡ßü‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    @Override
    public void performMaintenance() {
        System.out.println("Bus maintenance scheduled monthly.");
    }
}

// Main ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏: ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ entry point
public class Main {
    public static void main(String[] args) {
        // Polymorphism: Parent ‡¶ü‡¶æ‡¶á‡¶™ Vehicle, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶∏‡¶≤‡ßá Truck ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü
        Vehicle truck = new Truck("Volvo FMX", 20, 5);
        Vehicle bus = new Bus("Hyundai Super", 40, 25);

        truck.startEngine();    // Polymorphic behavior
        truck.showDetails();

        System.out.println();

        bus.startEngine();      // Polymorphic behavior
        bus.showDetails();

        System.out.println();

        // Type casting: Truck-specific method call ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø object cast ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
        if (truck instanceof Truck) {
            Truck t = (Truck) truck;
            t.loadGoods(10);   // ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            t.loadGoods(7);    // ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶π‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
        }

        System.out.println();

        // Interface ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá maintenance ‡¶Æ‡ßá‡¶•‡¶° ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        if (bus instanceof Maintainable) {
            Maintainable m = (Maintainable) bus;
            m.performMaintenance();
        }
    }
}
